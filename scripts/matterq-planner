#!/usr/bin/env python

import os
import sys
import argparse
import subprocess
import traceback
import cairo

MQ_SPOOLDIR = os.environ["MQ_SPOOLDIR"]
PLATE_PATH = os.path.join(MQ_SPOOLDIR, "depositions")


class Clearance(object):
    def __init__(self, x1, x2, y1, y2):
        self.x1 = x1
        self.x2 = x2
        self.y1 = y1
        self.y2 = y2

    @classmethod
    def from_str(cls, string):
        parts = map(float, string.split(":"))
        return Clearance(*parts)


class Region(object):
    def __init__(self, x1, x2, y1, y2, z1=None, z2=None):
        self.x1 = x1
        self.x2 = x2
        self.y1 = y1
        self.y2 = y2
        self.z1 = z1
        self.z2 = z2

    @classmethod
    def from_dict(cls, limits):
        return Region(limits["X"][0], limits["X"][1], limits["Y"][0],
                      limits["Y"][1], limits["Z"][0], limits["Z"][1])

    @classmethod
    def from_str(cls, string):
        limits = {}

        for line in string.split("\n"):
            if len(line) == 0:
                continue

            parts = line.strip().split("\t")

            if parts[0] == "E":
                continue

            assert len(parts) == 3

            limits[parts[0]] = (float(parts[1]), float(parts[2]))

        #assert set(limits.keys()) == set("XYZ")

        return cls.from_dict(limits)

    @classmethod
    def from_file(cls, filename):
        return cls.from_str(open(filename).read())

    def get_z_safe(self):
        if self.z2 is None:
            raise KeyError

        return self.z2

    def shift(self, x, y):
        self.x1, self.x2 = (self.x1 + x,
                            self.x2 + x)
        self.y1, self.y2 = (self.y1 + y,
                            self.y2 + y)

    def draw(self, ctx, colour, outline=False, label=None):
        ctx.set_source_rgba(*colour)

        ctx.rectangle(self.x1,
                      self.y1,
                      self.x2 - self.x1,
                      self.y2 - self.y1)

        if outline:
            ctx.stroke()
        else:
            ctx.fill()

        if label is not None:
            ctx.set_source_rgba(0, 0, 0)
            ctx.move_to(max(0, self.x1),
                        max(0, self.y1))
            ctx.show_text(label)

    def __le__(self, other):
        return (self.x1 >= other.x1 and
                self.x2 <= other.x2 and
                self.y1 >= other.y1 and
                self.y2 <= other.y2)

    def __and__(self, other):
        for axis in ("X", "Y"):
            if other.x1 < self.x1 and other.x2 < self.x1:
                return False

            if other.x1 > self.x2 and other.x2 > self.x2:
                return False

            if other.y1 < self.y1 and other.y2 < self.y1:
                return False

            if other.y1 > self.y2 and other.y2 > self.y2:
                return False

        return True

    def __add__(self, other):
        if not isinstance(other, Clearance):
            raise TypeError

        return Region(self.x1 - other.x1, self.x2 + other.x2,
                      self.y1 - other.y1, self.y2 + other.y2)

    def __repr__(self):
        return "<%s(%f,%f,%f,%f)>" % (type(self).__name__,
                                      self.x1,
                                      self.y1,
                                      self.x2,
                                      self.y2)


def detect_collisions(depositions, new):
    for d1 in depositions:
        for d2 in depositions:
            if d1 == d2:
                continue

            if d1 & d2:
                sys.stderr.write("Existing depositions conflict: %s & %s\n" %
                                 (d1, d2))
                assert True

        if d1 & new:
            return True

    return False


def initial_region_zmin(args, zsafe, head, zmin):
    # Create a Region with the intended working bounds of the new print so we
    # can check for conflicts with existing regions.
    ignore = '"%d:%d:%d:%d"' % ((zsafe + head).x1, (zsafe + head).x2,
                                (zsafe + head).y1, (zsafe + head).y2)

    cmd = ["austerus-verge", "-p", "-i", ignore]
    if zmin is not None:
        cmd.append("-z")
        cmd.append(str(zmin))

    cmd.append(args.filename)

    if args.verbose:
        sys.stderr.write("run: ")
        sys.stderr.write(str(" ".join(cmd)))
        sys.stderr.write("\n")

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)

    assert p.wait() == 0
    out, err = p.communicate()

    new = Region.from_str(out)

    return new


def initial_region_deposition(args):
    cmd = ["austerus-verge", "-p", "-d", args.filename]

    if args.verbose:
        sys.stderr.write("run: ")
        sys.stderr.write(str(" ".join(cmd)))
        sys.stderr.write("\n")

    p = subprocess.Popen(cmd, stdout=subprocess.PIPE)

    assert p.wait() == 0
    out, err = p.communicate()

    newdep = Region.from_str(out)

    return newdep


def parse_args():
    parser = argparse.ArgumentParser()

    parser.add_argument("filename",
                        type=str,
                        metavar="FILE",
                        nargs="?",
                        help="Gcode file for which to plan printing")

    parser.add_argument("--pack",
                        action="store_true",
                        help="Always shift print for efficient bed filling")

    parser.add_argument("--svg",
                        default=None,
                        type=argparse.FileType("w"),
                        metavar="FILE",
                        help="Write planner SVG")

    parser.add_argument("--verbose",
                        action="store_true",
                        help="Explain what is being done")

    return parser.parse_args()


def main():
    args = parse_args()

    head = Clearance.from_str(os.environ["MQ_HEADSIZE"])

    bedsize = map(float, os.environ["MQ_PRINTBED"].split(":"))
    assert len(bedsize) == 2

    bed = Region(0.0, bedsize[0], 0.0, bedsize[1])

    if args.svg is not None:
        surface = cairo.SVGSurface(args.svg, bed.x2, bed.y2)
        ctx = cairo.Context(surface)

        ctx.set_line_width(1.0)

        ctx.set_source_rgb(0.6, 0.6, 0.6)
        ctx.rectangle(0, 0, bed.x2, bed.y2)
        ctx.fill()

        # Axes
        ctx.set_source_rgb(0, 0, 0)

        ctx.move_to(5, 5)
        ctx.line_to(45, 5)
        ctx.stroke()

        ctx.move_to(50, 5)
        ctx.show_text("x")

        ctx.move_to(5, 5)
        ctx.line_to(5, 45)
        ctx.stroke()

        ctx.move_to(5, 50)
        ctx.show_text("y")

    # Create a Region where the Z axis will be homed (X0 Y0) so that we can
    # check it is safe to do so.
    zsafe = Region(0.0, 0.0, 0.0, 0.0)

    if args.svg is not None:
        (zsafe + head).draw(ctx, (1.0, 1.0, 0.0, 0.8))

    # Load all existing depositions on the plate.
    depositions = []

    for filename in os.listdir(PLATE_PATH):
        d = Region.from_file(os.path.join(PLATE_PATH, filename))
        depositions.append(d)

        if args.svg is not None:
            d.draw(ctx, (1.0, 0.0, 0.0, 0.8))

    if args.filename is None:
        if args.svg is not None:
            surface.finish()

        exit(0)

    # Calculate safe working Z value.
    z = 0.0
    zmin = None

    for d1 in depositions:
        zmin = max(z, d1.get_z_safe()) + 5

    new_working = initial_region_zmin(args, zsafe, head, zmin)
    #assert new_working <= bed ?

    new_working.draw(ctx, (0.0, 0.0, 0.8, 0.8), outline=True, label="initial working")

    new_deposition = initial_region_deposition(args)
    assert new_deposition <= bed

    new_deposition.draw(ctx, (0.0, 0.0, 0.8, 0.8), outline=True, label="initial")

    valid = True

    if detect_collisions(depositions, new_working + head):
        sys.stderr.write("collision with existing\n")
        valid = False

    if new_deposition & (zsafe + head):
        sys.stderr.write("collision with zsafe\n")
        valid = False

    if valid and not args.pack:
        if args.verbose:
            sys.stderr.write("valid as is\n")

        if args.svg is not None:
            new_deposition.draw(ctx, (0.0, 0.0, 0.8, 0.8))
            surface.finish()

        sys.exit(0)

    """
    # bring back?
    if detect_collisions(depositions, zsafe + head):
        if args.verbose:
            sys.stderr.write("Z reset conflict error\n")

        if args.svg is not None:
            surface.finish()

        sys.exit(2)
    """

    # Detect any conflicts
    shift = None

    padding = Clearance(5, 5, 5, 5)
    #padding = Clearance(10, 10, 10, 10)
    #padding = Clearance(1, 1, 1, 1)

    # still discrepency between first plan and shift and replan very  often, confusing.

    sys.stderr.write(str((head.x1 > head.x2, head.y1 > head.y2)))
    dx = head.x1 > head.x2 and -1 or 1
    dy = head.y1 > head.y2 and -1 or 1
    for x in range(-dx * int(bedsize[0]), dx * int(bedsize[0]), dx * 5):
        if shift is not None:
            break

        for y in range(-dy * int(bedsize[1]), dy * int(bedsize[1]), dy * 5):
            new_deposition.shift(x, y)

            if (new_deposition + Clearance(5, 5, 5, 5)) <= bed:
                if not detect_collisions(depositions, new_deposition + head + padding) and \
                   not new_deposition & (zsafe + head):
                    shift = x, y
                    break

            new_deposition.shift(-x, -y)

    if shift is None:
        if args.verbose:
            sys.stderr.write("Not enough room on build plate\n")

        if args.svg is not None:
            surface.finish()

        sys.exit(2)

    x, y = shift

    if args.svg is not None:
        (new_deposition + head).draw(ctx, (0.0, 0.0, 0.8, 0.6), outline=True,
                                     label="shifted working")
        new_deposition.draw(ctx, (0.0, 0.0, 0.8, 0.6),
                            label="shifted")

    if args.svg is not None:
        surface.finish()

    if args.verbose:
        sys.stderr.write("shifted: %s\n" % repr(new_deposition))

    print "DX\t%f" % shift[0]
    print "DY\t%f" % shift[1]

    if zmin is not None:
        print "ZMIN\t%f" % zmin

    print "SX\t%f" % (new_deposition.x1
                      + ((new_deposition.x2 - new_deposition.x1) / 2))
    print "SY\t%f" % (new_deposition.y1
                      + ((new_deposition.y2 - new_deposition.y1) / 2))

    if args.svg is not None:
        surface.finish()

    sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except AssertionError:
        traceback.print_exc()
        sys.exit(3)

